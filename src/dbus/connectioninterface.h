/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was:
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CONNECTIONINTERFACE_H
#define CONNECTIONINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generictypes.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Settings.Connection
 */
class OrgFreedesktopNetworkManagerSettingsConnectionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef NMQT_STATIC
    {
        return "org.kde.fakenetwork.Settings.Connection";
    }
#else
    {
        return "org.freedesktop.NetworkManager.Settings.Connection";
    }
#endif

public:
    OrgFreedesktopNetworkManagerSettingsConnectionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopNetworkManagerSettingsConnectionInterface();

    Q_PROPERTY(bool Unsaved READ unsaved)
    inline bool unsaved() const
    {
        return qvariant_cast< bool >(property("Unsaved"));
    }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ClearSecrets()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ClearSecrets"), argumentList);
    }

    inline QDBusPendingReply<> Delete()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<NMVariantMapMap> GetSecrets(const QString &setting_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(setting_name);
        return asyncCallWithArgumentList(QStringLiteral("GetSecrets"), argumentList);
    }

    inline QDBusPendingReply<NMVariantMapMap> GetSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSettings"), argumentList);
    }

    inline QDBusPendingReply<> Save()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Save"), argumentList);
    }

    inline QDBusPendingReply<> Update(NMVariantMapMap properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("Update"), argumentList);
    }

    inline QDBusPendingReply<> UpdateUnsaved(NMVariantMapMap properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("UpdateUnsaved"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QVariantMap &properties);
    void Removed();
    void Updated();
};

#endif
