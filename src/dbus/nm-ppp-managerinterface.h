/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generictypes.h -p nm-ppp-managerinterface /home/jgrulich/development/projects/libnm-qt/dbus/introspection/nm-ppp-manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NM_PPP_MANAGERINTERFACE_H
#define NM_PPP_MANAGERINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generictypes.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.PPP
 */
class OrgFreedesktopNetworkManagerPPPInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.PPP"; }

public:
    OrgFreedesktopNetworkManagerPPPInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerPPPInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, QString> NeedSecrets()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("NeedSecrets"), argumentList);
    }
    inline QDBusReply<QString> NeedSecrets(QString &password)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("NeedSecrets"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            password = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> SetIp4Config(const QVariantMap &config)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(config);
        return asyncCallWithArgumentList(QLatin1String("SetIp4Config"), argumentList);
    }

    inline QDBusPendingReply<> SetState(uint state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("SetState"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
