/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -a nm-secret-agentadaptor -i secretagent.h -l NetworkManager::SecretAgent /home/grulja/projects/libnm-qt/dbus/introspection/nm-secret-agent.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "nm-secret-agentadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SecretAgentAdaptor
 */

SecretAgentAdaptor::SecretAgentAdaptor(NetworkManager::SecretAgent *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SecretAgentAdaptor::~SecretAgentAdaptor()
{
    // destructor
}

void SecretAgentAdaptor::CancelGetSecrets(const QDBusObjectPath &connection_path, const QString &setting_name)
{
    // handle method call org.freedesktop.NetworkManager.SecretAgent.CancelGetSecrets
    parent()->CancelGetSecrets(connection_path, setting_name);
}

void SecretAgentAdaptor::DeleteSecrets(const NMVariantMapMap &connection, const QDBusObjectPath &connection_path)
{
    // handle method call org.freedesktop.NetworkManager.SecretAgent.DeleteSecrets
    parent()->DeleteSecrets(connection, connection_path);
}

NMVariantMapMap SecretAgentAdaptor::GetSecrets(const NMVariantMapMap &connection, const QDBusObjectPath &connection_path, const QString &setting_name, const QStringList &hints, uint flags)
{
    // handle method call org.freedesktop.NetworkManager.SecretAgent.GetSecrets
    return parent()->GetSecrets(connection, connection_path, setting_name, hints, flags);
}

void SecretAgentAdaptor::SaveSecrets(const NMVariantMapMap &connection, const QDBusObjectPath &connection_path)
{
    // handle method call org.freedesktop.NetworkManager.SecretAgent.SaveSecrets
    parent()->SaveSecrets(connection, connection_path);
}
