/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p nm-device-tuninterface /home/jgrulich/development/projects/libnm-qt/dbus/introspection/nm-device-tun.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NETWORKMANAGERQT_DEVICE_TUNINTERFACE_H
#define NETWORKMANAGERQT_DEVICE_TUNINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Device.Tun
 */
class OrgFreedesktopNetworkManagerDeviceTunInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.Device.Tun"; }

public:
    OrgFreedesktopNetworkManagerDeviceTunInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerDeviceTunInterface();

    Q_PROPERTY(qlonglong Group READ group)
    inline qlonglong group() const
    { return qvariant_cast< qlonglong >(property("Group")); }

    Q_PROPERTY(QString Mode READ mode)
    inline QString mode() const
    { return qvariant_cast< QString >(property("Mode")); }

    Q_PROPERTY(bool MultiQueue READ multiQueue)
    inline bool multiQueue() const
    { return qvariant_cast< bool >(property("MultiQueue")); }

    Q_PROPERTY(bool NoPi READ noPi)
    inline bool noPi() const
    { return qvariant_cast< bool >(property("NoPi")); }

    Q_PROPERTY(qlonglong Owner READ owner)
    inline qlonglong owner() const
    { return qvariant_cast< qlonglong >(property("Owner")); }

    Q_PROPERTY(bool VnetHdr READ vnetHdr)
    inline bool vnetHdr() const
    { return qvariant_cast< bool >(property("VnetHdr")); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QVariantMap &properties);
};

#endif
